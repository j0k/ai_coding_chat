{
  "name": "AI_Powered Coding Chat IDE",
  "prompts": [
    "1. Code Execution Service  \n-----  \nCreate a Python class called CodeRunner that:  \n- Accepts code strings and language type (python/js/bash)  \n- Creates temporary files in system-safe temp directory  \n- Executes code using subprocess with timeout protection  \n- Captures stdout/stderr/exit codes  \n- Returns structured results with execution metadata  \n- Integrates with existing CommandTab output display",
    "2. Git Integration Core  \n-----  \nImplement GitManager class using gitpython that:  \n- Initializes with repo path validation  \n- Has methods for stage_all(), commit(msg), push(), pull()  \n- Auto-detects uncommitted AI-generated files  \n- Handles common exceptions (merge conflicts, auth errors)  \n- Connects to existing AIFlowTab's execution pipeline",
    "3. Auto-Commit Workflow  \n-----  \nCreate a workflow that automatically:  \n1. Detects code outputs from AI responses  \n2. Saves generated files to './ai_outputs/' with timestamp  \n3. Stages all changes in output directory  \n4. Commits with message format: \"AI-generated: [timestamp] [model]\"  \n5. Shows commit status in UI status bar",
    "4. Debug Analyzer  \n-----  \nBuild error pattern matcher that:  \n- Analyzes CodeRunner's stderr output  \n- Identifies error types (syntax, runtime, import)  \n- Extracts line numbers from stack traces  \n- Generates suggested fix prompts  \n- Creates clickable error links in chat messages",
    "5. Sandboxed Execution  \n-----  \nEnhance CodeRunner with:  \n- Containerized execution using Docker  \n- Memory/cpu limitations  \n- Filesystem isolation  \n- Network access control  \n- Security audit for dangerous commands  \n- Integration with existing security config",
    "6. CI/CD Flow Generator  \n-----  \nCreate prompt that generates:  \n- GitHub Actions/YAML pipelines  \n- Dockerfile templates  \n- Testing harnesses  \n- Deployment scripts  \nBased on project type (webapp/lib/cli) and tech stack",
    "7. Real-Time Output Display  \n-----  \nAdd scrolling output panel to AIFlowTab that:  \n- Shows live execution results  \n- Colors stdout/stderr differently  \n- Allows stopping long-running processes  \n- Preserves history between flow runs  \n- Links outputs to source prompts",
    "8. Smart Rollback System  \n-----  \nImplement Git-based version recovery:  \n- When code execution fails >3 times  \n- Auto-revert to last working commit  \n- Generate analysis of breaking changes  \n- Create branch for failed experiments  \n- Integrate with navigation history",
    "9. AI-Powered Conflict Resolution  \n-----  \nCreate merge conflict handler that:  \n- Parses conflicting files  \n- Generates resolution options  \n- Shows diff visualization  \n- Allows selective patching  \n- Maintains conflict history in metadata",
    "10. Context-Aware Prompting  \n-----  \nEnhance existing chat with:  \n- Codebase-aware suggestions  \n- File tree comprehension  \n- API documentation lookup  \n- Error context integration  \n- Project-specific term expansion",
    "11. Flow Debugging Assistant  \n-----  \nBuild interactive debugger that:  \n- Lets users insert breakpoints in AI flows  \n- Inspects variable states between prompts  \n- Modifies prompt parameters mid-execution  \n- Saves debug sessions as branch snapshots  \n- Generates PDF/HTML post-mortem reports  \n- Integrates with NavigationPanel history",
    "12. Performance Optimizer  \n-----  \nCreate analysis tools that:  \n- Profile code execution times across commits  \n- Suggest algorithmic complexity improvements  \n- Recommend memoization/caching patterns  \n- Generate comparative benchmark tests  \n- Visualize memory/CPU usage graphs  \n- Connect with CodeRunner metrics system",
    "13. Security Auditor  \n-----  \nImplement safety checks that:  \n- Scan code for OWASP Top 10 vulnerabilities  \n- Detect exposed secrets/credentials  \n- Validate third-party dependency licenses  \n- Check filesystem permission levels  \n- Generate SBOM (Software Bill of Materials)  \n- Integrate with GitManager pre-commit hooks",
    "14. Documentation Generator  \n-----  \nAuto-create documentation that:  \n- Converts chat conversations to Markdown docs  \n- Generates API reference from code comments  \n- Builds interactive usage examples  \n- Maintains versioned changelog entries  \n- Exports knowledge base as static site  \n- Syncs with Project Explorer file tree",
    "15. Multi-Model Orchestration  \n-----  \nCreate pipeline that:  \n- Routes prompts to domain-specific LLMs  \n- Combines outputs via consensus voting  \n- Validates code with static analysis  \n- Maintains model version lineage  \n- Tracks model performance metrics  \n- Integrates with API client's model selector",
    "16. Interactive Code Review  \n-----  \nBuild PR-like system that:  \n- Shows side-by-side diffs of AI changes  \n- Generates line-by-line review comments  \n- Explains architectural decisions  \n- Suggests test coverage improvements  \n- Maintains review conversation history  \n- Links to relevant coding standards",
    "17. Project Scaffolder  \n-----  \nCreate template generator for:  \n- React/Node.js full-stack apps  \n- Python CLI tools with click  \n- REST API servers (FastAPI/Flask)  \n- Machine learning pipelines  \n- Library packages with CI/CD  \n- Integrated with CommandTab executor",
    "18. Learning Advisor  \n-----  \nDevelop educational assistant that:  \n- Explains generated code step-by-step  \n- Suggests curated documentation links  \n- Creates interactive coding exercises  \n- Tracks concept mastery levels  \n- Adapts explanations to skill level  \n- Integrates with chat message tags",
    "19. API Integrator  \n-----  \nBuild connector framework that:  \n- Generates AWS/GCP/Azure SDK clients  \n- Creates ORM models for databases  \n- Builds OpenAPI specifications  \n- Auto-generates authentication layers  \n- Manages rate limiting/retries  \n- Shares config with Security Auditor",
    "20. Workflow Visualizer  \n-----  \nCreate diagram tool that:  \n- Maps AI prompt sequences as flowcharts  \n- Shows execution timing heatmaps  \n- Visualizes code dependency graphs  \n- Highlights performance bottlenecks  \n- Exports PlantUML/Mermaid diagrams  \n- Syncs with GitManager commit history"
  ],
  "delimiter": "=====",
  "metadata": {
    "created": "2025-04-26T05:16:57.278737",
    "modified": "2025-04-26T05:23:34.018782"
  },
  "filename": "ai_powered_coding_chat_ide.json"
}